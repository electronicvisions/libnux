import os
from os.path import join
from waflib.extras.test_base import summary
from waflib.extras.symwaf2ic import get_toplevel_path


def depends(ctx):
    ctx("haldls")
    ctx("libnux")


def options(opt):
    opt.load("pytest")


def configure(conf):
    conf.load("compiler_cxx")
    conf.load("python")
    conf.check_python_version()
    conf.check_python_headers()
    conf.load("pytest")


def build(bld):
    bld.env.DLSvx_HARDWARE_AVAILABLE = "cube" == os.environ.get("SLURM_JOB_PARTITION")
    bld.env.DLSvx_SIM_AVAILABLE = "FLANGE_SIMULATION_RCF_PORT" in os.environ

    build_host_python(bld)
    build_ppu_cpp(bld)

    bld.add_post_fun(summary)


def build_host_python(bld):
    bld(name="libnux-simtest-log_access_pattern",
        tests="log_access_pattern_host.py",
        features="use pytest pylint pycodestyle",
        use="dlens_vx_v1",
        install_path="${PREFIX}/bin/tests/sim",
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run=not bld.env.DLSvx_SIM_AVAILABLE,
        test_environ=dict(
            TEST_BINARY_PATH=os.path.join(get_toplevel_path(),
                                          "build",
                                          "libnux",
                                          "test",
                                          "with_hostcode"),
            FLANGE_LOG_PATH=os.path.join(get_toplevel_path(),
                                         "hxfpga",
                                         "units",
                                         "synplify_wrapper",
                                         "sim",
                                         "xrun.log")),
        test_timeout=3600
        )


def build_ppu_cpp(bld):
    bld.program(name="libnux-test-refgen_access_pattern-ppu",
                features="cxx",
                target="refgen_access_pattern-ppu.bin",
                source="refgen_access_pattern-ppu.cpp",
                use=["nux_runtime_vx"],
                env=bld.all_envs["nux_vx"])

    bld.program(name="libnux-test-synram_access_pattern-ppu",
                features="cxx",
                target="synram_access_pattern-ppu.bin",
                source="synram_access_pattern-ppu.cpp",
                use=["nux_runtime_vx"],
                env=bld.all_envs["nux_vx"])

    bld.program(name="libnux-test-correlation_reset_causal-ppu",
                features="cxx",
                target="correlation_reset_causal-ppu.bin",
                source="correlation_reset_causal-ppu.cpp",
                use=["nux_runtime_vx"],
                env=bld.all_envs["nux_vx"])

    bld.program(name="libnux-test-neuron_reset_global-ppu",
                features="cxx",
                target="neuron_reset_global-ppu.bin",
                source="neuron_reset_global-ppu.cpp",
                use=["nux_runtime_vx"],
                env=bld.all_envs["nux_vx"])
