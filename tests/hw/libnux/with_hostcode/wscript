import os
from os.path import join
import re
import yaml
from enum import Enum, auto
from numbers import Integral

from waflib.extras.test_base import summary
from waflib.extras.symwaf2ic import get_toplevel_path
from waflib.Errors import BuildError


class TestTarget(Enum):
    SOFTWARE_ONLY = auto()
    HARDWARE = auto()
    SIMULATION = auto()


def depends(ctx):
    ctx("haldls")
    ctx("libnux")


def options(opt):
    opt.load("pytest")


def configure(conf):
    conf.load("compiler_cxx")
    conf.load("python")
    conf.check_python_version()
    conf.check_python_headers()
    conf.load("pytest")


def build(bld):
    if "FLANGE_SIMULATION_RCF_PORT" in os.environ:
        bld.env.TEST_TARGET = TestTarget.SIMULATION

        try:
            chip_revision = int(os.environ.get("SIMULATED_CHIP_REVISION"))
        except TypeError:
            raise BuildError("Environment variable 'SIMULATED_CHIP_REVISION' "
                             "not set or cannot be casted to integer.")
        bld.env.CURRENT_SETUP = dict(chip_revision=chip_revision)
    elif "SLURM_HWDB_YAML" in os.environ:
        bld.env.TEST_TARGET = TestTarget.HARDWARE
        slurm_licenses = os.environ.get("SLURM_HARDWARE_LICENSES")
        hwdb_entries = os.environ.get("SLURM_HWDB_YAML")
        fpga_id = int(re.match(r"W(?P<wafer>\d+)F(?P<fpga>\d+)",
                               slurm_licenses)["fpga"])
        fpgas = yaml.full_load(hwdb_entries)["fpgas"]
        fpga = None
        for entry in fpgas:
            if entry["fpga"] == fpga_id:
                fpga = entry
                break
        if not fpga:
            raise BuildError("FPGA not found in hwdb")
        bld.env.CURRENT_SETUP = fpga
    else:
        bld.env.TEST_TARGET = TestTarget.SOFTWARE_ONLY
        bld.env.CURRENT_SETUP = dict(chip_revision=None)

    for chip_version_number in [3]:
        build_host_python(bld, chip_version_number)
        build_ppu_cpp(bld, chip_version_number)

    bld.add_post_fun(summary)


def build_host_python(bld, chip_version: Integral):
    bld(name=f"libnux-simtest-log_access_pattern_vx_v{chip_version}",
        tests=f"log_access_pattern_host_vx_v{chip_version}.py",
        features="use pytest pylint pycodestyle",
        use=f"dlens_vx_v{chip_version}",
        install_path="${PREFIX}/bin/tests/sim",
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run=not (bld.env.TEST_TARGET == TestTarget.SIMULATION and
                      int(bld.env.CURRENT_SETUP["chip_revision"]) == chip_version),
        test_environ=dict(
            TEST_BINARY_PATH=os.path.join(get_toplevel_path(),
                                          "build",
                                          "libnux",
                                          "tests",
                                          "hw",
                                          "libnux",
                                          "with_hostcode"),
            FLANGE_LOG_PATH=os.path.join(get_toplevel_path(),
                                         "hxfpga",
                                         "units",
                                         "synplify_wrapper",
                                         "sim",
                                         "xrun.log")),
        test_timeout=3600
        )

    bld(name=f"libnux-test-extmem_vx_v{chip_version}",
        tests=f"extmem_vx_v{chip_version}.py",
        features="use pytest pylint pycodestyle",
        use=f"dlens_vx_v{chip_version}",
        install_path="${PREFIX}/bin/tests/sim",
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run=not (bld.env.TEST_TARGET == TestTarget.HARDWARE and
                      int(bld.env.CURRENT_SETUP["chip_revision"]) == chip_version),
        test_environ=dict(
            TEST_BINARY_PATH=os.path.join(get_toplevel_path(),
                                          "build",
                                          "libnux",
                                          "tests",
                                          "hw",
                                          "libnux",
                                          "with_hostcode")),
        test_timeout=30
        )

    if chip_version >= 2:
        bld(name=f"libnux-test-neuron_reset_vector_vx_v{chip_version}",
            tests=f"neuron_reset_vector_vx_v{chip_version}.py",
            features="use pytest pylint pycodestyle",
            use=f"dlens_vx_v{chip_version}",
            install_path="${PREFIX}/bin/tests/sim",
            pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
            pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
            skip_run=not (bld.env.TEST_TARGET == TestTarget.HARDWARE and
                          int(bld.env.CURRENT_SETUP["chip_revision"]) == chip_version),
            test_environ=dict(
                TEST_BINARY_PATH=os.path.join(get_toplevel_path(),
                                              "build",
                                              "libnux",
                                              "tests",
                                              "hw",
                                              "libnux",
                                              "with_hostcode")),
            test_timeout=30
            )

        bld(
            name=f"libnux_barriertest_vx_v{chip_version}",
            tests=f"test_barrier_vx_v{chip_version}.py",
            features='use pytest pylint pycodestyle',
            use='dlens_vx',
            install_path='${PREFIX}/bin/tests',
            skip_run=not bld.env.cube_partition,
            env = bld.all_envs[''],
            test_environ = dict(TEST_BINARY_PATH=os.path.join(bld.env.PREFIX, 'build', 'libnux', 'tests', 'hw', 'libnux', 'with_hostcode')),
            pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
            pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
            test_timeout = 2000
        )


def build_ppu_cpp(bld, chip_version: Integral):
    env = bld.all_envs[f"nux_vx_v{chip_version}"].derive()
    env.detach()

    bld.program(name=f"libnux-test-refgen_access_pattern-ppu_vx_v{chip_version}",
                features="cxx",
                target=f"refgen_access_pattern-ppu_vx_v{chip_version}.bin",
                source="vx/refgen_access_pattern-ppu.cpp",
                use=[f"nux_runtime_vx_v{chip_version}"],
                env=env)

    bld.program(name=f"libnux-test-synram_access_pattern-ppu_vx_v{chip_version}",
                features="cxx",
                target=f"synram_access_pattern-ppu_vx_v{chip_version}.bin",
                source="vx/synram_access_pattern-ppu.cpp",
                use=[f"nux_runtime_vx_v{chip_version}"],
                env=env)

    bld.program(name=f"libnux-test-correlation_reset_causal-ppu_vx_v{chip_version}",
                features="cxx",
                target=f"correlation_reset_causal-ppu_vx_v{chip_version}.bin",
                source="vx/correlation_reset_causal-ppu.cpp",
                use=[f"nux_runtime_vx_v{chip_version}"],
                env=env)

    bld.program(name=f"libnux-test-neuron_reset_global-ppu_vx_v{chip_version}",
                features="cxx",
                target=f"neuron_reset_global-ppu_vx_v{chip_version}.bin",
                source="vx/neuron_reset_global-ppu.cpp",
                use=[f"nux_runtime_vx_v{chip_version}"],
                env=env)

    bld.program(name=f"libnux-test-extmem-ppu_vx_v{chip_version}",
                features="cxx",
                target=f"extmem-ppu_vx_v{chip_version}.bin",
                source="vx/extmem-ppu.cpp",
                use=[f"nux_runtime_vx_v{chip_version}"],
                env=bld.all_envs[f"nux_vx_v{chip_version}"])

    if chip_version >= 2:
        bld.program(name=f"libnux-test-neuron_reset_vector-ppu_vx_v{chip_version}",
                    features="cxx",
                    target=f"neuron_reset_vector-ppu_vx_v{chip_version}.bin",
                    source="vx/neuron_reset_vector-ppu.cpp",
                    use=[f"nux_vx_v{chip_version}", f"nux_runtime_vx_v{chip_version}"],
                    env=env)

    bld.program(
        features = 'cxx',
        target = f"barrier_two_ppus_vx_v{chip_version}.bin",
        source = ['vx/barrier_two_ppus.cpp'],
        use = [f"nux_vx_v{chip_version}", f"nux_runtime_vx_v{chip_version}"],
        env = env,
    )
